[tool.poetry]
name = "backend"
version = "1.0"
description = "Backend service"
license = "Proprietary"
authors = ["Anton Alekseev <hi@aalekseev.me>"]

# NOTE:
# without this explicit reference to PyPI, poetry may raise exception "PackageNotFound".
[[tool.poetry.source]]
name = "the_pypi"
url = "https://pypi.org/simple"
default = true

[tool.poetry.dependencies]
python = "^3.10"
django-environ = "*"
django-extensions = "*"
django-hijack = "^3.2.1"
django-model-utils = "^4.2.0"
gunicorn = "==20.*"
psycopg2-binary = "==2.9.*"
python-dateutil = "==2.*"
requests = "*"
sentry-sdk = "==1.*"
wagtail = "^4"
whitenoise = "==6.*"

[tool.poetry.group.dev.dependencies]
ipdb = "*"

[tool.poetry.group.fmt.dependencies]
black = "*"
isort = "*"

[tool.poetry.group.mypy.dependencies]
django-stubs = "*"
mypy = "*"
types-python-dateutil = "2.*"
types-requests = "*"

[tool.poetry.group.lint.dependencies]
pyenchant = "*"
pylint-django = "*"
ruff = "*"

[tool.poetry.group.test.dependencies]
# Can't read configuration from pyproject.toml without this dependency
coverage = {version = "*", extras = ["toml"]}
flaky = "^3.7.0"
model-bakery = "*"
pytest = "*"
pytest-cov = "*"
pytest-datadir = "*"
pytest-django = "*"
pytest-mock = "*"
pytest-regressions = "*"
pytest-translations = "*"
responses = "^0.22.0"
splinter = {extras = ["selenium4"], version = "*"}

[tool.poetry.group.security.dependencies]
pip-audit = "*"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
# Enable specific Python version if necessary:
target-version = ['py311']
line-length = 88
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | build
    | dist
    | docs
    | cover
    | templates
  )/
  | local.py
  | local_test.py
)
'''

[tool.isort]
skip = "app/wsgi.py"
skip_glob = "node_modules"
line_length = '88'
atomic = 'true'
multi_line_output = '3'
include_trailing_comma = 'true'
force_grid_wrap = '0'
use_parentheses = 'true'
ensure_newline_before_comments = 'true'
known_django = "django"
known_pytest = "pytest"
overwrite_in_place = 'true'
known_first_party = "accounts,dashboard"
known_third_party = "wagtail,django"
lines_between_types = '0'
sections = "FUTURE,STDLIB,DJANGO,PYTEST,THIRDPARTY,FIRSTPARTY,LOCALFOLDER"
lines_after_imports = '2'
force_alphabetical_sort_within_sections = '1'

[tool.coverage.run]
branch = true
relative_files = true
omit = [
  "*test*",
  "*migrations*",
  "/app/manage.py",
  "/app/wsgi.py",
  "/app/urls.py"
]
data_file = "/root/.cache/coverage/.data"

[tool.coverage.html]
directory = "cover"

[tool.pytest.ini_options]
minversion = "6.0"
cache_dir = "/root/.cache/pytest"
DJANGO_SETTINGS_MODULE = "settings"
addopts = [
	"--strict-markers",
	"--junit-xml=report.xml",
	"--reuse-db",
	"--doctest-modules",
	"--cov=.",
	"--cov-report=term-missing:skip-covered",
	"--cov-report=xml",
	"--cov-report=html",
	"--cov-fail-under=100"
]
markers = ["django_db", "parametrize", "unit", "e2e"]
norecursedirs = [
	"migrations",
	".data",
	"node_modules",
]
python_files = ["test_*.py", "tests/*.py", "tests.py"]
doctest_optionflags = "NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL"

[tool.ruff]
line-length = 88
ignore = [
	"E501"	# Line-length is handled by Black
]
exclude = [
	".git",
  ".mypy_cache",
  "_build",
  "build",
  "dist",
  "docs",
  "cover",
  "templates",
  "templates",
	"settings",
]
target-version = "py311"

[tool.pylint.messages-control]
disable = [
  "fixme",
  "line-too-long",  # formatting done by Black
  "missing-class-docstring",
  "missing-function-docstring",
  "missing-module-docstring",
  "too-few-public-methods",
  "raise-missing-from",
]

[tool.mypy]
# The mypy configurations: https://mypy.readthedocs.io/en/latest/config_file.html
python_version = "3.10"

cache_dir = "/root/.cache/mypy"
check_untyped_defs = true
ignore_errors = false
ignore_missing_imports = true
strict_optional = true
strict_equality = true
no_implicit_optional = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unreachable = true
warn_no_return = true
enable_error_code = "ignore-without-code"

plugins = [
	"mypy_django_plugin.main",
]

[tool.django-stubs]
django_settings_module = "settings"

[[tool.mypy.overrides]]
module = "celery.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["*.tests.*", "*.migrations.*", "*.settings.*"]
ignore_errors = true

[tool.ruff]
line-length = 88
ignore = [
	"E501"	# Line-length is handled by Black
]
exclude = [
	".git",
  ".mypy_cache",
  "_build",
  "build",
  "dist",
  "docs",
  "cover",
  "templates",
	"settings",
]
target-version = "py310"
cache-dir = "/root/.cache/ruff"

[tool.pylint.MASTER]
py-version = "3.10"
ignore = [
	"node_modules",
  "settings",
  "migrations",
  "templates",
	"cover",
	"storages.py",
]
ignore-patterns="test.*?py,conftest.py"
# Use a conservative default here; 2 should speed up most setups and not hurt
# any too bad. Override on command line as approprifate.
jobs = 2
load-plugins = ["pylint_django"]
django-settings-module = "settings.local_test"
[tool.pylint.'MESSAGES CONTROL']
disable = ["unused-argument"]
[tool.pylint.FORMAT]
max-line-length=140
