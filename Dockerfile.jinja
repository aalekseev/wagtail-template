FROM python:3.9-slim-buster
LABEL name="{{project_name}}" version="1.0.0"

ENV POETRY_VIRTUALENVS_CREATE 0
ENV POETRY_NO_INTERACTION 1
ENV POETRY_HOME "$HOME/.poetry"
ENV PATH="$POETRY_HOME/bin:$PATH"
ENV PYTHONPYCACHEPREFIX /.pycache
ENV DJANGO_DEBUG 0

# Let all *.pyc files stay within the container, for Python >= 3.8
RUN mkdir -p $PYTHONPYCACHEPREFIX

# Use non-interactive frontend for debconf
RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections

# Install system requirements
RUN apt-get update && \
    apt-get install -y --no-install-recommends build-essential gettext libpq-dev zlib1g-dev libjpeg62-turbo-dev wget && \
    rm -rf /var/lib/apt/lists/*

RUN wget -O - -o /dev/null https://install.python-poetry.org | python3 -

COPY ["backend/pyproject.toml", "backend/poetry.lock", "/"]

# Install all dependencies from poetry.lock (dev included by default)
RUN poetry install --no-dev

# Copy code
COPY ./backend /app

# Set the default directory where CMD will execute
WORKDIR /app

# Compile translations to .mo files
RUN DJANGO_DOCKER_BUILD=True python manage.py compilemessages

# Based on Node 14 Debian
FROM node:18-buster-slim as node_builder

ENV NODE_ENV production

# Use non-interactive frontend for debconf
RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections

# Install system requirements
RUN apt-get update && \
    apt-get install -y --no-install-recommends git python build-essential && \
    rm -rf /var/lib/apt/lists/*

# Install node requirements
COPY ./frontend /app
COPY ./app /backend

# Set the default directory where CMD will execute
WORKDIR /app

# Install node dependencies
RUN yarn install --frozen-lockfile

# Build node stuff
RUN yarn build

# Resume Django build
FROM base

# Copy static files
COPY --from=node_builder /app/_build/styles /app/static/styles

# Copy all from node image
RUN /app/manage.py collectstatic --noinput

# Add non-root user for the app
RUN adduser --disabled-password --gecos "" --shell /bin/false app
# Switch to non-root user for the app
RUN chown -R app /staticfiles
USER app

RUN /app/manage.py collectstatic --noinput

CMD gunicorn wsgi:application --workers 2
